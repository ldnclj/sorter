;; Analyzed by ClojureScript 1.7.170
{:use-macros {go-loop cljs.core.async.macros}, :excludes #{}, :name petrol.core, :imports nil, :requires {async cljs.core.async, cljs.core.async cljs.core.async, set clojure.set, clojure.set clojure.set}, :uses {<! cljs.core.async, chan cljs.core.async, pipe cljs.core.async, >! cljs.core.async, alts! cljs.core.async, put! cljs.core.async}, :defs {process-message {:protocol-inline nil, :meta {:file "/Users/chrishowe-jones/sorter/resources/public/js/sorter/compiled/out/petrol/core.cljs", :line 26, :column 4, :end-line 26, :end-column 19, :protocol petrol.core/Message, :doc "Given a message, take the current app state and\n                   return the new one. In essense this is a reducing\n                   function.", :arglists (quote ([message app]))}, :protocol petrol.core/Message, :name petrol.core/process-message, :variadic false, :file "resources/public/js/sorter/compiled/out/petrol/core.cljs", :end-column 19, :method-params ([message app]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 26, :max-fixed-arity 2, :fn-var true, :arglists (quote ([message app])), :doc "Given a message, take the current app state and\n                   return the new one. In essense this is a reducing\n                   function."}, send! {:protocol-inline nil, :meta {:file "/Users/chrishowe-jones/sorter/resources/public/js/sorter/compiled/out/petrol/core.cljs", :line 61, :column 7, :end-line 61, :end-column 12, :arglists (quote ([channel message])), :doc "Send information from the user to the message queue.\n  The message must be a record which implements the Message protocol."}, :name petrol.core/send!, :variadic false, :file "resources/public/js/sorter/compiled/out/petrol/core.cljs", :end-column 12, :method-params ([channel message]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 2, :fn-var true, :arglists (quote ([channel message])), :doc "Send information from the user to the message queue.\n  The message must be a record which implements the Message protocol."}, wrap {:protocol-inline nil, :meta {:file "/Users/chrishowe-jones/sorter/resources/public/js/sorter/compiled/out/petrol/core.cljs", :line 6, :column 7, :end-line 6, :end-column 11, :arglists (quote ([f in])), :doc "Apply a function to every element that comes out of a channel.\n\n  (This is fmap for channels)."}, :name petrol.core/wrap, :variadic false, :file "resources/public/js/sorter/compiled/out/petrol/core.cljs", :end-column 11, :method-params ([f in]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f in])), :doc "Apply a function to every element that comes out of a channel.\n\n  (This is fmap for channels)."}, Message {:meta {:file "/Users/chrishowe-jones/sorter/resources/public/js/sorter/compiled/out/petrol/core.cljs", :line 25, :column 14, :end-line 25, :end-column 21, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {process-message [[message app]]}}}, :protocol-symbol true, :name petrol.core/Message, :file "resources/public/js/sorter/compiled/out/petrol/core.cljs", :end-column 21, :column 1, :line 25, :protocol-info {:methods {process-message [[message app]]}}, :info nil, :end-line 25, :impls #{}, :doc nil, :jsdoc ("@interface")}, get-event-value {:protocol-inline nil, :meta {:file "/Users/chrishowe-jones/sorter/resources/public/js/sorter/compiled/out/petrol/core.cljs", :line 48, :column 8, :end-line 48, :end-column 23, :private true, :arglists (quote ([event])), :doc "Given a DOM event, return the value it yields. This abstracts over\n  the needless inconsistencies of the DOM."}, :private true, :name petrol.core/get-event-value, :variadic false, :file "resources/public/js/sorter/compiled/out/petrol/core.cljs", :end-column 23, :method-params ([event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event])), :doc "Given a DOM event, return the value it yields. This abstracts over\n  the needless inconsistencies of the DOM."}, EventSource {:meta {:file "/Users/chrishowe-jones/sorter/resources/public/js/sorter/compiled/out/petrol/core.cljs", :line 31, :column 14, :end-line 31, :end-column 25, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {watch-channels [[message app]]}}}, :protocol-symbol true, :name petrol.core/EventSource, :file "resources/public/js/sorter/compiled/out/petrol/core.cljs", :end-column 25, :column 1, :line 31, :protocol-info {:methods {watch-channels [[message app]]}}, :info nil, :end-line 31, :impls #{}, :doc nil, :jsdoc ("@interface")}, forward {:protocol-inline nil, :meta {:file "/Users/chrishowe-jones/sorter/resources/public/js/sorter/compiled/out/petrol/core.cljs", :line 13, :column 7, :end-line 13, :end-column 14, :arglists (quote ([f from])), :doc "Apply a function to every element that goes into a channel.\n\n  (This is contramap for channels)."}, :name petrol.core/forward, :variadic false, :file "resources/public/js/sorter/compiled/out/petrol/core.cljs", :end-column 14, :method-params ([f from]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f from])), :doc "Apply a function to every element that goes into a channel.\n\n  (This is contramap for channels)."}, !channels {:name petrol.core/!channels, :file "resources/public/js/sorter/compiled/out/petrol/core.cljs", :line 83, :column 1, :end-line 83, :end-column 25, :private true, :meta {:file "/Users/chrishowe-jones/sorter/resources/public/js/sorter/compiled/out/petrol/core.cljs", :line 83, :column 16, :end-line 83, :end-column 25, :private true}}, send-value! {:protocol-inline nil, :meta {:file "/Users/chrishowe-jones/sorter/resources/public/js/sorter/compiled/out/petrol/core.cljs", :line 69, :column 7, :end-line 69, :end-column 18, :arglists (quote ([channel message-fn])), :doc "Send information from the user to the message queue.\n\n  Similar to `send!`, except the message-fn will be called with the message's value first."}, :name petrol.core/send-value!, :variadic false, :file "resources/public/js/sorter/compiled/out/petrol/core.cljs", :end-column 18, :method-params ([channel message-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 2, :fn-var true, :arglists (quote ([channel message-fn])), :doc "Send information from the user to the message queue.\n\n  Similar to `send!`, except the message-fn will be called with the message's value first."}, watch-channels {:protocol-inline nil, :meta {:file "/Users/chrishowe-jones/sorter/resources/public/js/sorter/compiled/out/petrol/core.cljs", :line 32, :column 4, :end-line 32, :end-column 18, :protocol petrol.core/EventSource, :doc nil, :arglists (quote ([message app]))}, :protocol petrol.core/EventSource, :name petrol.core/watch-channels, :variadic false, :file "resources/public/js/sorter/compiled/out/petrol/core.cljs", :end-column 18, :method-params ([message app]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 32, :max-fixed-arity 2, :fn-var true, :arglists (quote ([message app])), :doc nil}, start-message-loop! {:protocol-inline nil, :meta {:file "/Users/chrishowe-jones/sorter/resources/public/js/sorter/compiled/out/petrol/core.cljs", :line 86, :column 7, :end-line 86, :end-column 26, :arglists (quote ([!app render-fn] [!app render-fn initial-channels])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([!app render-fn] [!app render-fn initial-channels]), :arglists ([!app render-fn] [!app render-fn initial-channels]), :arglists-meta (nil nil)}}, :name petrol.core/start-message-loop!, :variadic false, :file "resources/public/js/sorter/compiled/out/petrol/core.cljs", :end-column 26, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([!app render-fn] [!app render-fn initial-channels]), :arglists ([!app render-fn] [!app render-fn initial-channels]), :arglists-meta (nil nil)}, :method-params ([!app render-fn] [!app render-fn initial-channels]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 3, :fn-var true, :arglists ([!app render-fn] [!app render-fn initial-channels])}, watch-subchannels {:protocol-inline nil, :meta {:file "/Users/chrishowe-jones/sorter/resources/public/js/sorter/compiled/out/petrol/core.cljs", :line 39, :column 7, :end-line 39, :end-column 24, :arglists (quote ([submessage app path wrapper]))}, :name petrol.core/watch-subchannels, :variadic false, :file "resources/public/js/sorter/compiled/out/petrol/core.cljs", :end-column 24, :method-params ([submessage app path wrapper]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 4, :fn-var true, :arglists (quote ([submessage app path wrapper]))}, process-submessage {:protocol-inline nil, :meta {:file "/Users/chrishowe-jones/sorter/resources/public/js/sorter/compiled/out/petrol/core.cljs", :line 34, :column 7, :end-line 34, :end-column 25, :arglists (quote ([submessage app path]))}, :name petrol.core/process-submessage, :variadic false, :file "resources/public/js/sorter/compiled/out/petrol/core.cljs", :end-column 25, :method-params ([submessage app path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 3, :fn-var true, :arglists (quote ([submessage app path]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:else :recur :render}, :order [:recur :else :render]}, :doc nil}